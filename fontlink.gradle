import org.apache.tools.ant.taskdefs.condition.Os

// cleaner by variant?
android.sourceSets.main.res.srcDirs += file("$buildDir/intermediates/fontlink")

def config = project.hasProperty("react") ? project.react : [:];
def reactRoot = file(config.root ?: "../../")

afterEvaluate {

    android.applicationVariants.all { def variant ->
        def targetName = variant.name.capitalize()

        def linkReactNativeFontsTask = tasks.create(
            name: "linkReactNativeFonts${targetName}",
            type: Exec,
        ) {
            def nodeExecutableAndArgs = config.nodeExecutableAndArgs ?: ["node"]
            def execCommand = []
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                execCommand.addAll(["cmd", "/c", *nodeExecutableAndArgs])
            } else {
                execCommand.addAll([*nodeExecutableAndArgs])
            }

            workingDir reactRoot
            commandLine(
                *execCommand,
                "node_modules/react-native-mo-fontlink/lib/fontlink-android.js",
                file("$buildDir/intermediates/fontlink").absolutePath,
                variant.dirName,
                buildDir,
            )
        }

        def generateAssetsTask = tasks.findByName("generate${targetName}Assets")
        generateAssetsTask.dependsOn(linkReactNativeFontsTask)
    }
}
